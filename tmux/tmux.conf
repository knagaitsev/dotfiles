unbind C-b
set -g prefix C-Space
bind-key C-Space last-window
bind-key e send-prefix

setw -g xterm-keys on


#  modes
setw -g clock-mode-colour colour5
setw -g mode-style 'fg=colour1 bg=default bold'

# statusbar
set -g status-position bottom
set -g status-justify left
set -g status-style 'bg=default fg=colour18'
# set -g status-left ''
# set -g status-right '#[fg=colour0,bg=colour15] %d/%m #[fg=colour15,bg=default] %H:%M:%S '
set -g status-right-length 50
set -g status-left-length 20


setw -g window-status-current-style 'fg=colour1 bg=default bold'
setw -g window-status-current-format '#[fg=colour0 bg=colour15] #I #W#[fg=colour8]#F '
setw -g window-status-style 'fg=colour1 bg=default dim'
setw -g window-status-format ' #I #[fg=colour250]#W#[fg=colour244]#F '
setw -g window-status-bell-style 'fg=colour255 bg=colour1 bold'

set -g status-left-length '100'
set -g status 'on'

setw -g window-status-separator ''
set -g status-left '#[fg=colour222,bg=colour238] #(whoami)@#H #[fg=colour238,bg=default,nobold,nounderscore,noitalics]#[fg=colour235,bg=colour235,nobold,nounderscore,noitalics]î‚°'
set -g status-right '#[fg=colour222,bg=colour238] %r #[fg=colour154,bg=colour238,nobold,nounderscore,noitalics]'



# set -g status-bg white
# set -g status-fg white
# set -g status-left ' #{?client_prefix,E, } '
# set -g status-left-length 10
# set -g status-justify left
# set -g status-interval 1
# set -qg status-right ''

set -g pane-border-style "fg=default fg=#222222"
set -g pane-active-border-style "bg=default fg=blue"
set-option -g status-position bottom

set -g set-titles on
set -g allow-rename on

# set -g window-status-separator ' '
# setw -g window-status-current-style reverse
# setw -g window-status-current-format ' #I #W '
# setw -g window-status-format ' #I #W '

set -Fg 'status-format[0]' '#{status-format[0]}'
# set -g status-style reverse

set -g default-terminal 'tmux-256color'
set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'

set -g base-index 1
setw -g pane-base-index 1

#VIM - style bindings between panes
setw -g mode-keys vi

bind-key j command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key s command-prompt -p "send pane to:"  "join-pane -t '%%'"
bind-key ! break-pane -t :
bind-key @ command-prompt -p "create pane from:"  "join-pane -s ':%%'"
bind-key m command-prompt -p "change window #W from #I to:" "move-window -t '%%'"

bind -n M-r command-prompt -p "Rename window #I:" "rename-window '%%'"

bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

#/////////////////////////////////////////////////////////////////////////

#Smart pane switching with awareness of Vim splits.
#See : https:  // github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-Left if-shell "$is_vim" "send-keys M-Left"  "select-pane -L"
bind-key -n M-Down if-shell "$is_vim" "send-keys M-Down"  "select-pane -D"
bind-key -n M-Up if-shell "$is_vim" "send-keys M-Up"  "select-pane -U"
bind-key -n M-Right if-shell "$is_vim" "send-keys M-Right"  "select-pane -R"



#bind - key - n C -\ if - \
    shell                 \
    "$is_vim"             \
    "send-keys C-\\"      \
    "select-pane -l"



bind-key -T copy-mode-vi M-Left select-pane -L
bind-key -T copy-mode-vi M-Down select-pane -D
bind-key -T copy-mode-vi M-Up select-pane -U
bind-key -T copy-mode-vi M-Right select-pane -R
#bind - key - T copy - mode - vi C -\ select - pane - l

#/////////////////////////////////////////////////////////////////////////


bind -n S-Left  resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down  resize-pane -D 2
bind -n S-Up    resize-pane -U 2

#tab to enter copy - mode
unbind [
bind Tab copy-mode
#v to select
#bind - key - t vi - copy 'v' begin - selection
#y to yank
#bind - key - t vi - copy 'y' copy - selection
#P to paste
#unbind P
#bind P paste - buffer


unbind M-q
bind -n M-q confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind -n M-Q kill-pane


unbind *
bind * list-clients

#faster re - sourcing
bind r source-file ~/.tmux.conf;
#Commands.
#bind C - a last - window
unbind %
unbind *
bind | split-window -h -c "#{pane_current_path}"
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"


set-option -g repeat-time 0
set -sg escape-time 0

set -g mouse on


set -g renumber-windows on

#
# RESIZING
#
# when multiple clients are connected:
# only resize window when smallest client
# is* actively* looking at the screen
#

setw -g aggressive-resize on

unbind Left
unbind Right
unbind Down
unbind Up
bind -r Left resize-pane -L 2
bind -r Right resize-pane -R 2
bind -r Down resize-pane -D 2
bind -r Up resize-pane -U 2

#genereated bind keys for switching windows
#Don't change!
bind-key -n M-1 if-shell 'tmux select-window -t :1' '' 'new-window -t :1 -c "#{pane_current_path}"'
bind-key -n M-2 if-shell 'tmux select-window -t :2' '' 'new-window -t :2 -c "#{pane_current_path}"'
bind-key -n M-3 if-shell 'tmux select-window -t :3' '' 'new-window -t :3 -c "#{pane_current_path}"'
bind-key -n M-4 if-shell 'tmux select-window -t :4' '' 'new-window -t :4 -c "#{pane_current_path}"'
bind-key -n M-5 if-shell 'tmux select-window -t :5' '' 'new-window -t :5 -c "#{pane_current_path}"'
bind-key -n M-6 if-shell 'tmux select-window -t :6' '' 'new-window -t :6 -c "#{pane_current_path}"'
bind-key -n M-7 if-shell 'tmux select-window -t :7' '' 'new-window -t :7 -c "#{pane_current_path}"'
bind-key -n M-8 if-shell 'tmux select-window -t :8' '' 'new-window -t :8 -c "#{pane_current_path}"'
bind-key -n M-9 if-shell 'tmux select-window -t :9' '' 'new-window -t :9 -c "#{pane_current_path}"'




# List of plugins
# set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'dracula/tmux'
set -g @plugin 'tmux-plugins/tmux-cpu'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run -b '~/dotfiles/tmux/plugins/tpm/tpm'
